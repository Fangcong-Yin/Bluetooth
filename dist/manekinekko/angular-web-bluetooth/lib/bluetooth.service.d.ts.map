{"version":3,"file":"bluetooth.service.d.ts","sources":["bluetooth.service.d.ts"],"names":[],"mappingssourcesContent":["/// <reference types=\"web-bluetooth\" />\r\nimport { Observable } from 'rxjs';\r\nimport { ConsoleLoggerService } from './logger.service';\r\nimport { BrowserWebBluetooth } from './platform/browser';\r\ndeclare type ReadValueOptions = {\r\n    acceptAllDevices?: boolean;\r\n    optionalServices?: BluetoothServiceUUID[];\r\n    characteristic: BluetoothCharacteristicUUID;\r\n    service: BluetoothServiceUUID;\r\n};\r\nexport declare class BluetoothCore {\r\n    private readonly webBle;\r\n    private readonly console;\r\n    private device$;\r\n    private gatt$;\r\n    private characteristicValueChanges$;\r\n    private gattServer;\r\n    constructor(webBle: BrowserWebBluetooth, console: ConsoleLoggerService);\r\n    getDevice$(): Observable<BluetoothDevice>;\r\n    getGATT$(): Observable<BluetoothRemoteGATTServer>;\r\n    streamValues$(): Observable<DataView>;\r\n    /**\r\n     * Run the discovery process and read the value form the provided service and characteristic\r\n     * @param options the ReadValueOptions\r\n     */\r\n    value(options: ReadValueOptions): Promise<DataView>;\r\n    value$(options: ReadValueOptions): Observable<DataView>;\r\n    /**\r\n     * Run the discovery process.\r\n     *\r\n     * @param Options such as filters and optional services\r\n     * @return  The GATT server for the chosen device\r\n     */\r\n    discover(options?: RequestDeviceOptions): Promise<any>;\r\n    /**\r\n     * This handler will trigger when the client disconnets from the server.\r\n     *\r\n     * @param event The onDeviceDisconnected event\r\n     */\r\n    onDeviceDisconnected(event: Event): void;\r\n    /**\r\n     * Run the discovery process.\r\n     *\r\n     * @param Options such as filters and optional services\r\n     * @return  Emites the value of the requested service read from the device\r\n     */\r\n    discover$(options?: RequestDeviceOptions): Observable<void | BluetoothRemoteGATTServer>;\r\n    /**\r\n     * Connect to current device.\r\n     *\r\n     * @return  Emites the gatt server instance of the requested device\r\n     */\r\n    connectDevice(device: BluetoothDevice): Promise<BluetoothRemoteGATTServer>;\r\n    /**\r\n     * Connect to current device.\r\n     *\r\n     * @return  Emites the gatt server instance of the requested device\r\n     */\r\n    connectDevice$(device: BluetoothDevice): Observable<BluetoothRemoteGATTServer>;\r\n    /**\r\n     * Disconnect the current connected device\r\n     */\r\n    disconnectDevice(): void;\r\n    /**\r\n     * Requests the primary service.\r\n     *\r\n     * @param gatt The BluetoothRemoteGATTServer sever\r\n     * @param service The UUID of the primary service\r\n     * @return The remote service (as a Promise)\r\n     */\r\n    getPrimaryService(gatt: BluetoothRemoteGATTServer, service: BluetoothServiceUUID): Promise<BluetoothRemoteGATTService>;\r\n    /**\r\n     * Requests the primary service.\r\n     *\r\n     * @param gatt The BluetoothRemoteGATTServer sever\r\n     * @param service The UUID of the primary service\r\n     * @return The remote service (as an observable).\r\n     */\r\n    getPrimaryService$(gatt: BluetoothRemoteGATTServer, service: BluetoothServiceUUID): Observable<BluetoothRemoteGATTService>;\r\n    /**\r\n     * Requests a characteristic from the primary service.\r\n     *\r\n     * @param primaryService The primary service.\r\n     * @param characteristic The characteristic's UUID.\r\n     * @returns The characteristic description (as a Promise).\r\n     */\r\n    getCharacteristic(primaryService: BluetoothRemoteGATTService, characteristic: BluetoothCharacteristicUUID): Promise<BluetoothRemoteGATTCharacteristic | void>;\r\n    /**\r\n     * Requests a characteristic from the primary service.\r\n     *\r\n     * @param primaryService The primary service.\r\n     * @param characteristic The characteristic's UUID.\r\n     * @returns The characteristic description (as a Observable).\r\n     */\r\n    getCharacteristic$(primaryService: BluetoothRemoteGATTService, characteristic: BluetoothCharacteristicUUID): Observable<void | BluetoothRemoteGATTCharacteristic>;\r\n    /**\r\n     * Sets the characteristic's state.\r\n     *\r\n     * @param service The parent service of the characteristic.\r\n     * @param characteristic The requested characteristic\r\n     * @param state An ArrayBuffer containing the value of the characteristic.\r\n     * @return The primary service (useful for chaining).\r\n     */\r\n    setCharacteristicState(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID, state: ArrayBuffer): Observable<BluetoothRemoteGATTService>;\r\n    /**\r\n     * Enables the specified characteristic of a given service.\r\n     *\r\n     * @param service The parent service of the characteristic.\r\n     * @param characteristic The requested characteristic\r\n     * @return The primary service (useful for chaining).\r\n     */\r\n    enableCharacteristic(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID, state?: any): Observable<BluetoothRemoteGATTService>;\r\n    /**\r\n     * Disables the specified characteristic of a given service.\r\n     *\r\n     * @param service The parent service of the characteristic.\r\n     * @param characteristic The requested characteristic.\r\n     * @return The primary service (useful for chaining).\r\n     */\r\n    disbaleCharacteristic(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID, state?: any): Observable<BluetoothRemoteGATTService>;\r\n    /**\r\n     * Dispatches new values emitted by a characteristic.\r\n     *\r\n     * @param event the distpatched event.\r\n     */\r\n    onCharacteristicChanged(event: Event): void;\r\n    /**\r\n     * Reads a value from the characteristics, as a DataView.\r\n     *\r\n     * @param characteristic The requested characteristic.\r\n     * @return the DataView value (as an Observable).\r\n     */\r\n    readValue$(characteristic: BluetoothRemoteGATTCharacteristic): Observable<DataView>;\r\n    /**\r\n     * Writes a value into the specified characteristic.\r\n     *\r\n     * @param characteristic The requested characteristic.\r\n     * @param value The value to be written (as an ArrayBuffer or Uint8Array).\r\n     * @return an void Observable.\r\n     */\r\n    writeValue$(characteristic: BluetoothRemoteGATTCharacteristic, value: ArrayBuffer | Uint8Array): Observable<void>;\r\n    /**\r\n     * A stream of DataView values emitted by the specified characteristic.\r\n     *\r\n     * @param characteristic The characteristic which value you want to observe\r\n     * @return The stream of DataView values.\r\n     */\r\n    observeValue$(characteristic: BluetoothRemoteGATTCharacteristic): Observable<DataView>;\r\n    /**\r\n     * A utility method to convert LE to an unsigned 16-bit integer values.\r\n     *\r\n     * @param data The DataView binary data.\r\n     * @param byteOffset The offset, in byte, from the start of the view where to read the data.\r\n     * @return An unsigned 16-bit integer number.\r\n     */\r\n    littleEndianToUint16(data: any, byteOffset: number): number;\r\n    /**\r\n     * A utility method to convert LE to an unsigned 8-bit integer values.\r\n     *\r\n     * @param data The DataView binary data.\r\n     * @param byteOffset The offset, in byte, from the start of the view where to read the data.\r\n     * @return An unsigned 8-bit integer number.\r\n     */\r\n    littleEndianToUint8(data: any, byteOffset: number): number;\r\n    /**\r\n     * Sends random data (for testing purposes only).\r\n     *\r\n     * @return Random unsigned 8-bit integer values.\r\n     */\r\n    fakeNext(fakeValue?: () => DataView): void;\r\n}\r\nexport {};\r\n"]}